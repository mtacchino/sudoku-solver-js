/* Class representing a sudoku table  *  * Author: Matt Tacchino * * A sudoku table is a 9x9 matrix, containing 81 * sudoku digits. *  * Also contains method for solving the table *  */ //constructorfunction SudokuTable() {	this.table = [[],[],[],[],[],[],[],[],[]];	//initialize table with 0 values in empty blocks	for (var x = 0; x < 9; x++){		for (var y = 0; y < 9; y++){			this.table[x][y] = new SudokuDigit(x,y,0);		}	}}// check all digits to see if a) they are all ints from 1 to 9 and // b) they are not repeated in any row, column, or quardant SudokuTable.prototype.checkAllDigits = function(){	for (var x = 0; x < 9; x++){		for (var y = 0; y < 9; y++){			if (this.table[x][y].isSolved()){				if (!this.checkDigit(this.table[x][y])){ //check if digit is repeated					alert("This puzzle cannot be solved because a row, column, or quadrant has the same number more than once.");					return false;				}			}		}	}	return true;};//Cycle through table and remove possible values from digits where row, column, //or quadrant has a solved digitSudokuTable.prototype.removePossibleValues = function(){	var previousSolvedDigits = 0;	var currentSolvedDigits = this.getNumOfDigitsSolved();	while (previousSolvedDigits < currentSolvedDigits){		previousSolvedDigits = currentSolvedDigits;		for (var y = 0; y < 9; y++){			for (var x = 0; x < 9; x++){				digit = this.table[x][y];				if (!digit.isSolved()){					this.checkRow(digit);					this.checkColumn(digit);					this.checkQuadrant(digit);				}			}		}		currentSolvedDigits = this.getNumOfDigitsSolved();	}};//helper function for removePossibleValuesSudokuTable.prototype.checkRow = function(digit){	var indexOfCheck;	for (var x = 0; x < 9; x++){		indexOfCheck = digit.getPossibleValues().indexOf(parseInt(this.table[x][digit.getY()].getAnswer()));		if (digit.getX() != x && indexOfCheck >= 0)			digit.removePossibleValue(indexOfCheck);	}};	//helper function for removePossibleValuesSudokuTable.prototype.checkColumn = function(digit){	var indexOfCheck;	for (var y = 0; y < 9; y++){		indexOfCheck = digit.getPossibleValues().indexOf(parseInt(this.table[digit.getX()][y].getAnswer()));		if (digit.getY() != y && indexOfCheck >= 0)			digit.removePossibleValue(indexOfCheck);	}};	//helper function for removePossibleValuesSudokuTable.prototype.checkQuadrant = function(digit){	var indexOfCheck;	var startPosX = (Math.floor(digit.getX()/3))*3;	var startPosY = (Math.floor(digit.getY()/3))*3;	for (var y = startPosY; y < startPosY + 3; y++){		for (var x = startPosX; x < startPosX + 3; x++){			indexOfCheck = digit.getPossibleValues().indexOf(parseInt(this.table[x][y].getAnswer()));			if (digit.getX() != x && digit.getY() != y && indexOfCheck >= 0)				digit.removePossibleValue(indexOfCheck);		}	}};// check a single digit against the table to see if it passes all rules// return true if it passes and false otherwiseSudokuTable.prototype.checkDigit = function(digit) {		//check row	for (var x = 0; x < 9; x++)		if (digit.getAnswer() == this.table[x][digit.getY()].getAnswer() && digit.getX() != x)			return false;	//check column	for (var y = 0; y < 9; y++) 		if (digit.getAnswer() == this.table[digit.getX()][y].getAnswer() && digit.getY() != y)			return false;	//check quadrant	var startPosX = (Math.floor(digit.getX()/3))*3;	var startPosY = (Math.floor(digit.getY()/3))*3;	for (var y = startPosY; y < startPosY + 3; y++){		for (var x = startPosX; x < startPosX + 3; x++){			if (digit.getAnswer() == this.table[x][y].getAnswer() && digit.getX() != x && digit.getY() != y)				return false;		}	}	return true;};SudokuTable.prototype.solve = function(position) {	if (position > 81)		return true;			var x = (position-1)%9;	var y = Math.floor((position-1)/9);			if (this.table[x][y].isSolved()){		if (!this.checkDigit(this.table[x][y]))			return false;		else			return this.solve(position+1);		}			var possibleValues = this.table[x][y].getPossibleValues().slice(); //make a copy of the possible values at x,y	for (var i in possibleValues) {		var digit = new SudokuDigit(x,y,possibleValues[i]); //make copy of the digit and set the answer of the copy to the next possible value		if (this.checkDigit(digit)) { //check the digit to see if it is ok in the table			this.table[x][y] = digit; //if it's ok, set the table to point at that digit			if (this.solve(position+1)) //recurse at the next position				return true;		}	}	this.table[x][y].setAnswer(0); // reset on backtrack	return false;};SudokuTable.prototype.getNumOfDigitsSolved = function(){	var count = 0	for (var y = 0; y < 9; y++){		for (var x = 0; x < 9; x++){			if (this.table[x][y].isSolved())				count += 1;		}	}	return count;}//toStringSudokuTable.prototype.toString = function(){	var str = "\n";	for (var y = 0; y < 9; y++){		for (var x = 0; x < 9; x++){			str = str + this.table[x][y].getAnswer() + " ";		}		str = str + "\n";	}	return str;};