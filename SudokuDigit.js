/* Class representing a sudoku digit * * Author: Matt Tacchino * * A sudoku digit is a digit from 1 to 9, * or an array of possible values. A digit can * can also be "safe" if it was an original input. * Original inputs should never be changed after they * are set *  */  //constructor function SudokuDigit(xLocation,yLocation,answer){	this.answer = answer;	this.xLocation = xLocation;	this.yLocation = yLocation;}//set possible values to an array from 1 to 9SudokuDigit.prototype.possibleValues = [1,2,3,4,5,6,7,8,9];//set isSafe to false for allSudokuDigit.prototype.isSafe = false;	//gettersSudokuDigit.prototype.getPossibleValues = function(){	return this.possibleValues;}SudokuDigit.prototype.isSolved = function(){	return (this.answer != 0);}	SudokuDigit.prototype.getSafe = function(){	return this.isSafe;}	SudokuDigit.prototype.getAnswer = function(){	if (this.answer == 0)		return "";	else		return this.answer;}	SudokuDigit.prototype.getX = function(){	return this.xLocation;}	SudokuDigit.prototype.getY = function(){	return this.yLocation;}//settersSudokuDigit.prototype.setSafe = function(isSafe){	this.isSafe = isSafe;}SudokuDigit.prototype.setAnswer = function(answer){	this.answer = answer;	this.possibleValues = [];	if (!this.isSolved()) { 		for (var i = 0; i < 9; i++)			this.possibleValues[i] = i+1; //add all possible values from 1 to 9	}}//remove a possible value from possibleValues arraySudokuDigit.prototype.removePossibleValue = function(index){	if (!this.isSolved()) {		this.possibleValues.splice(index,1);		if (this.possibleValues.length == 1)			this.setAnswer(this.possibleValues[0]);	}}//toStringSudokuDigit.prototype.toString = function(){	if (!this.isSolved()){		var str = "Possible values for location (" + this.xLocation + "," + this.yLocation + "): ";		for (var i in this.possibleValues)			str = str + this.possibleValues[i] + " ";		return str + "\n";	}	else		return "Answer for location (" + this.xLocation + "," + this.yLocation + "): " + this.answer + "\n";}